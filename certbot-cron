#!/bin/bash

# certbot cron helper.
# By: Wesley Robbins
# Description: Certbot helper enables you to run the renew
#   script daily and tests if within 5 days of expiration.  If
#   so will auto renew. Works for apache andcan be modified to
#   work with any web client.
#
# Usage: Edit certbot-cron and change URL and CERTBOTLOC. Set PrintInfo to 'no' if you do not want daily reports.  Edit crontab as root.  
#  crontab -e
#  0 3 0 * * path-to-certbot-cron 2>&1 

URL='NOTSET'
PrintInfo='no'
TESTRUN='no'
CERTBOTLOC='NOTSET'
WEBSTART='/etc/init.d/apache2 start'
WEBSTOP='/etc/init.d/apache2 stop'
CONFLOC='NOTSET'

load_config() {
   if [ -r /etc/certbot-cronrc ]; then
     . /etc/certbot-cronrc
   fi
   if [ -r ~/.certbot-cronrc ]; then
     . ~/.certbot-cronrc
   fi
   if [ $CONFLOC = 'NOTSET' ]; then
     echo " " 
   else
     . $CONFLOC
   fi
}

save_config() {
   if [[ $EUID -eq 0 ]]; then
     cat <<EOF_root >> /etc/certbot-cronrc
URL=${URL}
PrintInfo=${PrintInfo}
CERTBOTLOC='${CERTBOTLOC}'
WEBSTART='/etc/init.d/apache2 start'
WEBSTOP='/etc/init.d/apache2 stop'
CONFLOC='${CONFLOC}'
EOF_root

 else # Save as user.
     cat <<EOF_user >> ~/.certbot-cronrc
URL=${URL}
PrintInfo=${PrintInfo}
CERTBOTLOC='${CERTBOTLOC}'
WEBSTART='/etc/init.d/apache2 start'
WEBSTOP='/etc/init.d/apache2 stop'
CONFLOC='${CONFLOC}'
EOF_user
   fi
}
 
print_help() {
  echo "  Usage: certbot-cron [Options...]
 
-u, --url HTTPS webURL to monitor for SSL renewal
-v, --verbose  Printout information of the certificate
-s, --saveconf Save a configuration file
-l, --certbotLocation  Location of the certbot-auto script
-c, --config  location of custom configfile
-t, --testRun Run a renewal test
-h, --help This info
"
}
 
# Test if all required vars are set.
is_all_set() {
 
if [ ${URL} = 'NOTSET' ] || [ ${CERTBOTLOC} = 'NOTSET' ] ; then
   echo "Error: certbotloc and url must be set."
   print_help
   exit
fi
 
}

 
# load_config
#is_all_set
OPTIONS=`getopt -o u::h::v::s::l::t::c:: --long help::,verbose::,saveconf,url::,certbotloc::,testrun::,config:: -n "${0##*/}" -- "$@"`
eval set -- "$OPTIONS"
 while true; do
 case $1 in
     -u|--url)
       case "$2" in
         '')  URL=`uname -n` ; shift 2 ;;
          *)  URL="$2" ; shift 2 ;;
       esac ;;
     -v | --verbose)
       case "$2" in
         "") PrintInfo='yes' ; shift 2 ;;
          *) PrintInfo="$2" ; shift 2 ;;
       esac ;;
     -s|--saveconf) save_config; shift ;;
     -l|--certbotloc)
       case "$2" in
         "") CERTBOTLOC="/usr/local/bin/certbot-auto" ; shift 2 ;;
          *) CERTBOTLOC="$2" ; shift 2 ;;
       esac ;;
     -t|--testrun)
       case "$2" in
         "") TESTRUN='yes' ; shift 2 ;;
          *) TESTRUN="$2" ; shift 2 ;; 
       esac ;;
     -c|--config)
       case "$2" in
         "") echo "Error: config must be provided if switch is set. --config /etc/cephbot-cronrc.\n" ; shift 2 ;;
          *) CONFIGLOC=$2 ; shift 2 ;;
       esac ;;
     -h|--help) HELP='yes' && print_help ; shift ;;
     --) shift; break ;;
     *) echo "Error: requires arguments." ; exit 1 ;; 
 esac
 done

if [ ${TESTRUN} = 'yes' ] || [ ${PrintInfo} = "yes" ] ; then
  echo "testrun=${TESTRUN}"
  echo "certbotloc=${CERTBOTLOC}"
  echo "verbose=${PrintInfo}"
  echo "url=${URL}"
  echo "configloc=${CONFIGLOC}"
fi

#final check if the URL and CERTBOTLOC is set.
is_all_set

notBefore=`echo | /usr/bin/openssl s_client -connect ${URL}:443 2>/dev/null | openssl x509 -noout -dates | grep notBefore | cut -d'=' -f2`
notAfter=`echo | /usr/bin/openssl s_client -connect ${URL}:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d'=' -f2`

notBeforeUnix=`date --date="${notBefore}" +"%s"`
today=`date`
todayUnix=`date --date="${today}" +"%s"`
eightyfivedays="7344000"
renewDateUnix=$((notBeforeUnix + eightyfivedays))
renewDate=`date -d @$renewDateUnix`

if [ $renewDateUnix -gt $todayUnix  ]; then
   if [ ${PrintInfo} = "yes" ]; then
     echo "------------------"
     echo "You still have time. Today is ${today}. Waiting until ${renewDate} to renew. ${notAfter} is when your SSL cert expires. "
     echo "------------------"
   fi
else
   if [ ${PrintInfo} = 'yes'  ]; then
     echo "\n\n"
     echo "Time to renew your cert. Today is ${today} and your cert expires ${notAfter}"
   fi
     if [ $TESTRUN = 'yes' ]; then 
       ${WEBSTOP}
#       ${CERTBOTLOC} renew --dry-run
       ${WEBSTART}
     else
       ${WEBSTOP}
#       ${CERTBOT} renew --quiet --no-self-upgrade
       ${WEBSTART}
     fi
fi

